

package interfacedemo;

public interface Vehicle {

    public void accelerate();
    public void brake();
    public void steer();
}

package interfacedemo;
public class BMW implements Vehicle {

    @Override
    public void accelerate() {
        System.out.println("BMW car is accelerating!!");
    }

    @Override
    public void brake() {
        // TODO Auto-generated method stub
    }

    @Override
    public void steer() {
        // TODO Auto-generated method stub
    }
    }

package InterfaceDemo;
public class InterfaceTest {
public static void main(String[] args) {
        Vehicle ve = new BMW();
        ve.accelerate();
    }
}






/* Output:

BMW car is accelerating!!

*/











/* 
Interface: An interface is a collection of abstract methods.

Why do we need interface?
1. For fully abstraction
2. It supports multiple inheritance.

Interfaces have the following properties:
> Each method in an interface it also implicitly abstract , so the abstract keyword is not needed.
> Methods in an interface are implicitly public.
> A class can inherit from just one superclass, but can implement multiple interfaces!

Point to be notice:
> The java compiler adds public and abstract keywords before the interface method.
> The java compiler adds public, static and final keywords before the interface variable.
   So we can say that all variables are constant, no instance variables.
   
 */












